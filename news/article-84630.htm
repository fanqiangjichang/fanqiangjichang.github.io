<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
      <link rel="canonical" href="https://fanqiangjichang.github.io/news/article-84630.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Java设计模式——单例设计模式(八种实例)</title>
        <meta name="description" content="1、基本介绍  采取一定的方法保证在整个的软件系统中，对某个类智能存在一个对象实例，并且该类只提供一个取得其对象实例的方法(静态方法)。 比如Hibernate的SessionFactor，他充当数据" />
        <link rel="icon" href="/assets/website/img/freeclashx/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="翻墙机场 推荐VPN免费节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://fanqiangjichang.github.io/news/article-84630.htm" />
    <meta property="og:site_name" content="翻墙机场 推荐VPN免费节点订阅官网" />
    <meta property="og:title" content="Java设计模式——单例设计模式(八种实例)" />
    <meta property="og:image" content="https://fanqiangjichang.github.io/uploads/20250116/f0467c7639f50ecd7aa3c5cc0f413c38.webp" />
        <meta property="og:release_date" content="2025-03-30T09:33:59" />
    <meta property="og:updated_time" content="2025-03-30T09:33:59" />
        <meta property="og:description" content="1、基本介绍  采取一定的方法保证在整个的软件系统中，对某个类智能存在一个对象实例，并且该类只提供一个取得其对象实例的方法(静态方法)。 比如Hibernate的SessionFactor，他充当数据" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Java设计模式——单例设计模式(八种实例)">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/freeclashx/bootstrap.min.css">
    <!-- Font -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/freeclashx/font-awesome.min.css">
    <!-- Slicknav -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/freeclashx/slicknav.css">
    <!-- Owl carousel -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/freeclashx/owl.carousel.css">
    <link rel="stylesheet" type="text/css" href="/assets/website/css/freeclashx/owl.theme.css">
    <!-- Animate -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/freeclashx/animate.css">
    <!-- Main Style -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/freeclashx/main.css">
    <!-- Extras Style -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/freeclashx/extras.css">
    <!-- Responsive Style -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/freeclashx/responsive.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-JMGQZYHJKC"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-JMGQZYHJKC');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- Header Area wrapper Starts -->
    <header id="header-wrap">
              <!-- Navbar Start -->
        <nav class="navbar navbar-expand-lg fixed-top scrolling-navbar indigo">
            <div class="container">
                <!-- Brand and toggle get grouped for better mobile display -->
                <div class="navbar-header">
                    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#main-navbar" aria-controls="main-navbar" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                        <span class="icon-menu"></span>
                        <span class="icon-menu"></span>
                        <span class="icon-menu"></span>
                    </button>
                    <a href="/" class="navbar-brand xcblog-blog-logo">
                                                <span>翻墙机场</span>
                                            </a>
                </div>
                <div class="collapse navbar-collapse" id="main-navbar">
                    <ul class="navbar-nav mr-auto w-100 justify-content-end clearfix">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">
                                首页                            </a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">
                                免费节点                            </a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">
                                推荐机场                            </a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">
                                新闻资讯                            </a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">
                                客户端                            </a>
                        </li>
                                            </ul>
                </div>
            </div>
            <!-- Mobile Menu Start -->
            <ul class="mobile-menu navbar-nav">
                                <li>
                    <a href="/">
                        首页                    </a>
                </li>
                                <li>
                    <a href="/free-nodes/">
                        免费节点                    </a>
                </li>
                                <li>
                    <a href="/paid-subscribe/">
                        推荐机场                    </a>
                </li>
                                <li>
                    <a href="/news/">
                        新闻资讯                    </a>
                </li>
                                <li>
                    <a href="/client.htm">
                        客户端                    </a>
                </li>
                            </ul>
            <!-- Mobile Menu End -->
        </nav>
        <!-- Navbar End -->
        <!-- sliders -->
        <div id="sliders">
            <div class="full-width">
                <!-- light slider -->
                <div id="light-slider" class="carousel slide">
                    <div id="carousel-area">
                        <div id="carousel-slider" class="carousel slide" data-ride="carousel">
                            <div class="carousel-inner" role="listbox">
                                <div class="carousel-item active">
                                    <img src="/assets/website/img/freeclashx/slider/bg-1.jpg" alt="">
                                    <div class="carousel-caption">
                                        <h1 class="slide-title">Java设计模式——单例设计模式(八种实例)</h1>
                                        <h5 class="slide-text">
                                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                                        </h5>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End sliders -->
    </header>
    <!-- Header Area wrapper End -->
    
    <!-- Services Section Start -->
    <section id="services" class="section-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2> <a id="1_1" rel="nofollow"></a>1、基本介绍</h2> <ul> <li>采取一定的方法保证在整个的软件系统中，对某个类智能存在一个对象实例，并且该类只提供一个取得其对象实例的方法(静态方法)。</li> <li>比如Hibernate的SessionFactor，他充当数据存储源的代理，并负责创建Session对象。SessionFactor并不是轻量级的，一般情况下，一个项目通常只需要一个SessionFactor就够，这时就会使用到单例模式。</li> </ul> <h2> <a id="2_6" rel="nofollow"></a>2、单例模式的八种方式</h2> <ol> <li>饿汉式(静态常量)</li> <li>饿汉式(静态代码块)</li> <li>懒汉式(线程不安全)</li> <li>懒汉式(线程安全，同步方法)</li> <li>懒汉式(线程安全，同步代码块)</li> <li>双重检查</li> <li>静态内部类</li> <li>枚举</li> </ol> <h3> <a id="21_17" rel="nofollow"></a>2.1饿汉式(静态常量)</h3> <blockquote> <p>优点：写法简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</p> <p>缺点：在类装载的时候就完成实例化，没有达到懒加载的效果。如果从始至终都没使用过这个实例，则会造成内存的浪费。</p> <p>这种基于ClassLoader机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式(或其它的静态方法)导致类装载，这时候初始化instance就没有达到懒加载的效果</p> <p>结论：这种单例模式可用，<strong>可能造成内存浪费</strong></p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type1<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest01</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token comment">//测试</span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">//饿汉式(静态变量)</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	 	<span class="token comment">//1.构造器私有化，外部能new</span> 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		 	<span class="token punctuation">}</span> 	 	<span class="token comment">//2.本类内部创建对象实例</span> 	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	 	<span class="token comment">//3.提供一个公有的静态方法，返回实例对象</span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">return</span> instance<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	 <span class="token punctuation">}</span> </code></pre> <h3> <a id="22_62" rel="nofollow"></a>2.2饿汉式(静态代码块)</h3> <blockquote> <p>这种方式和2.1的方式类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候就执行静态代码块中的代码，初始化类的实例。优缺点和2.1是一样的。</p> <p>结论：这种单例模式可用，<strong>但是可能造成内存浪费</strong></p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type2<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest02</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">//饿汉式(静态变量)</span>  <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	<span class="token comment">//1.构造器私有化，外部能new</span> 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		 	<span class="token punctuation">}</span> 	 	<span class="token comment">//2.本类内部创建对象实例</span> 	<span class="token keyword">private</span>  <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span> 	 	<span class="token keyword">static</span> <span class="token punctuation">{<!-- --></span> <span class="token comment">// 在静态代码块中，创建单例对象</span> 		instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	 	<span class="token comment">//3. 提供一个公有的静态方法，返回实例对象</span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">return</span> instance<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	 <span class="token punctuation">}</span> </code></pre> <h3> <a id="23_106" rel="nofollow"></a>2.3懒汉式(线程不安全)</h3> <blockquote> <p>起到了懒加载的效果，但是只能在单线程下使用。</p> <p>如果在多线程下，一个线程进入了if(singleton==null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用使用这种方式。</p> <p>结论：在实际开发中，<strong>不要使用</strong>这种方式</p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type3<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest03</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉式1=============&gt;线程不安全"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span> 	 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> 	 	<span class="token comment">//提供一个静态的公有方法，当使用到该方法时，才去创建instance</span> 	<span class="token comment">//即懒汉式</span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 		<span class="token keyword">return</span> instance<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="24_146" rel="nofollow"></a>2.4懒汉式(线程安全，同步方法)</h3> <blockquote> <p>解决了线程安全问题，但是效率太低。每个线程在想获得类的实例的时候，执行getInstance方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类的实例，直接return就行了。方法进行同步效率太低。</p> <p>结论：在实际开发中，<strong>不推荐</strong>使用这种方式</p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type4<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest04</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉式2=============&gt;线程安全"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 懒汉式(线程安全，同步方法)</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span> 	 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> 	 	<span class="token comment">//提供一个静态的公有方法，加入同步处理的代码synchronized，解决线程安全问题</span> 	<span class="token comment">//即懒汉式</span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 		<span class="token keyword">return</span> instance<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="25_185" rel="nofollow"></a>2.5懒汉式(线程安全，同步代码块)</h3> <blockquote> <p>跟2.4类似，不推荐使用</p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type4<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest05</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉式2=============&gt;线程安全,同步代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 懒汉式(线程安全，同步方法)</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span> 	 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> 	 	<span class="token comment">//提供一个静态的公有方法，解决线程安全问题</span> 	<span class="token comment">//即懒汉式</span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			<span class="token comment">//同步代码块</span> 			<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 				instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 		<span class="token punctuation">}</span> 		<span class="token keyword">return</span> instance<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="26_225" rel="nofollow"></a>2.6双重检查</h3> <blockquote> <p>Double-Check概念是多线程开发中常使用到的，进行了两次if(singleton==null)，这样就可以保证线程安全了。</p> <p>实例化代码只用执行一次，后面再次访问时，判断if(singleton==null)，直接return实例化对象，也避免了反复进行方法同步。</p> <p>线程安全、延迟加载、效率高。</p> <p>结论：在实际开发中，<strong>推荐使用这种单例设计模式</strong></p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type6<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest06</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"双重检查"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token comment">// 懒汉式(线程安全，同步方法)</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton instance<span class="token punctuation">;</span> 	 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> 	 	<span class="token comment">//提供一个静态的公有方法，加入双重检查代码，解决线程安全问题，同事解决懒加载问题</span> 	<span class="token comment">//同时保证了效率，推荐使用</span> 	 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 					instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token punctuation">}</span> 			<span class="token punctuation">}</span> 			 		<span class="token punctuation">}</span> 		<span class="token keyword">return</span> instance<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="27_273" rel="nofollow"></a>2.7静态内部类</h3> <blockquote> <p>这种方式采用了类装载的机制来保证初始化实例时只有一个线程。</p> <p>静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才回装载SingletonInstance类，从而完成Singleton的实例化。</p> <p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p> <p>避免了线程不安全，利用静态内部类特点实现延迟加载，效率高。</p> <p>结论：<strong>推荐使用</strong></p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type7<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest07</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用静态内部类完成单例模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		 	<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 静态内部类完成，推荐使用</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton instance<span class="token punctuation">;</span> 	 	<span class="token comment">//构造器私有化</span> 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> 	 	<span class="token comment">//写一个静态内部类，该类中有个静态数据 Singleton</span> 	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonInstance</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token punctuation">}</span> 	 	<span class="token comment">//提供一个静态的公有方法，直接返回SingletonInstance.INSTANCE</span> 	 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		 		<span class="token keyword">return</span> SingletonInstance<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="28_323" rel="nofollow"></a>2.8枚举</h3> <blockquote> <p>借助了JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</p> <p>结论：<strong>推荐使用</strong></p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type8<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest08</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> 		 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		 		instance<span class="token punctuation">.</span><span class="token function">sayOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token comment">//使用枚举实现单例</span> <span class="token keyword">enum</span> Singleton <span class="token punctuation">{<!-- --></span> 	INSTANCE<span class="token punctuation">;</span> <span class="token comment">//属性</span> 	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h2> <a id="3JDK_354" rel="nofollow"></a>3、单例模式在JDK应用的源码分析</h2> <blockquote> <p>java.lang.Runtime就是经典的单例模式(饿汉式)</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230112/13847df97f33e7c70a05feb51f8d3ef6.jpg" alt="Java设计模式——单例设计模式(八种实例)"></p> <h2> <a id="4_361" rel="nofollow"></a>4、单例模式注意事项和细节说明</h2> <ul> <li>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</li> <li>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是new</li> <li>单例模式使用的场景：需要频繁的进行创建和销毁对象、创建对象时耗过多或耗费资源过多(即：重量级对象)，但有经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如数据源、session工厂等)</li> </ul> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-83897.htm">动物疫苗注射注意事项及禁忌有哪些 动物疫苗注射注意事项及禁忌有哪些呢</a></p>
                                        <p>下一个：<a href="/news/article-84631.htm">济南宠物狗领养（济南狗狗领养免费平台）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-84630.htm" title="Java设计模式——单例设计模式(八种实例)">Java设计模式——单例设计模式(八种实例)</a></li>
                        <li class="py-2"><a href="/news/article-81767.htm" title="python end用法_python end用法">python end用法_python end用法</a></li>
                        <li class="py-2"><a href="/news/article-83176.htm" title="淮北宠物救助电话（淮北市狗狗救助中心免费领养）">淮北宠物救助电话（淮北市狗狗救助中心免费领养）</a></li>
                        <li class="py-2"><a href="/news/article-83896.htm" title="免费领养狗狗正规网站平台有哪些软件可以下载（免费领养狗狗app）">免费领养狗狗正规网站平台有哪些软件可以下载（免费领养狗狗app）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-27-node-share-links.htm" title="翻墙机场 | 3月27日22.7M/S|免费Clash/SSR/Shadowrocket/V2ray订阅节点分享">翻墙机场 | 3月27日22.7M/S|免费Clash/SSR/Shadowrocket/V2ray订阅节点分享</a></li>
                        <li class="py-2"><a href="/news/article-79013.htm" title="mysql将一张表的数据批量插入到另外一张表">mysql将一张表的数据批量插入到另外一张表</a></li>
                        <li class="py-2"><a href="/news/article-83897.htm" title="动物疫苗注射注意事项及禁忌有哪些 动物疫苗注射注意事项及禁忌有哪些呢">动物疫苗注射注意事项及禁忌有哪些 动物疫苗注射注意事项及禁忌有哪些呢</a></li>
                        <li class="py-2"><a href="/news/article-73604.htm" title="成都市动物防疫站免费疫苗预约（成都动物防疫站电话）">成都市动物防疫站免费疫苗预约（成都动物防疫站电话）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-15-free-subscribe-node.htm" title="翻墙机场 | 3月15日21.6M/S|免费Clash/V2ray/SSR/Shadowrocket订阅节点分享">翻墙机场 | 3月15日21.6M/S|免费Clash/V2ray/SSR/Shadowrocket订阅节点分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-24-node-share.htm" title="翻墙机场 | 3月24日18.6M/S|免费V2ray/Shadowrocket/Clash/SSR订阅节点分享">翻墙机场 | 3月24日18.6M/S|免费V2ray/Shadowrocket/Clash/SSR订阅节点分享</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">3</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">57</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- Services Section End -->
    
        <!-- Footer Section -->
    <footer class="footer">
        <!-- Copyright -->
        <div id="copyright">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 col-md-6 col-xs-12">
                        <p class="copyright-text">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            翻墙机场 推荐VPN免费节点订阅官网 版权所有 Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 col-md-6 col-xs-12">
                        <ul class="nav nav-inline  justify-content-end ">
                            <li class="nav-item">
                                <a class="nav-link active" href="/">Home</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">Sitemap</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">Privacy Policy</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">Terms of services</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- Copyright  End-->
    </footer>
    <!-- Footer Section End-->
    <!-- Go to Top Link -->
    <a href="#" class="back-to-top">
        <i class="fa fa-arrow-up"></i>
    </a>
    <!-- Preloader -->
    <div id="preloader">
        <div class="loader" id="loader-1"></div>
    </div>
    <!-- End Preloader -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="/assets/website/js/frontend/freeclashx/jquery-min.js"></script>
    <script src="/assets/website/js/frontend/freeclashx/popper.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashx/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashx/owl.carousel.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashx/jquery.mixitup.js"></script>
    <script src="/assets/website/js/frontend/freeclashx/jquery.countTo.js"></script>
    <script src="/assets/website/js/frontend/freeclashx/jquery.nav.js"></script>
    <script src="/assets/website/js/frontend/freeclashx/scrolling-nav.js"></script>
    <script src="/assets/website/js/frontend/freeclashx/jquery.easing.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashx/jquery.slicknav.js"></script>
    <script src="/assets/website/js/frontend/freeclashx/form-validator.min.js"></script>
    <script src="/assets/website/js/frontend/freeclashx/contact-form-script.js"></script>
    <script src="/assets/website/js/frontend/freeclashx/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>